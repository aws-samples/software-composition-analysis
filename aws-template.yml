---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to build a docker image build factory.
Parameters:
  ProjectName:
    AllowedPattern: '[a-z0-9.-]*'
    ConstraintDescription: Project Name must contain only lowercase a-z, 0-9 and -
      characters.
    Default: sampletest
    Description: Define the Name of the Project such as test/data etc. (Value must
      be comprised only of lowercase a-z, 0-9, .-)
    Type: String
  LambdaZipS3Bucket:
    Default: codeartifact-vuln-scan
    Description: Define the Name of the S3 Bucket containing Lambda code zip
    Type: String
  LambdaZipS3Key:
    Default: lambda.zip
    Description: Define the Name of the S3 Bucket Key containing Lambda code zip
    Type: String
Resources:
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Sub ${ProjectName}CodeRepo
      RepositoryName: !Sub ${ProjectName}-repo
      Triggers: 
        - Name: AllTrigger
          DestinationArn: !GetAtt PackageCalcLambda.Arn
          Events:
          - updateReference
          - createReference
  PackageCalcLambda:
    Type: AWS::Lambda::Function
    DependsOn: PackageCalcLambdaRole
    Properties:
      Code:
        ZipFile: |
          """ 
          """
          Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          SPDX-License-Identifier: MIT-0

          Permission is hereby granted, free of charge, to any person obtaining a copy of this
          software and associated documentation files (the "Software"), to deal in the Software
          without restriction, including without limitation the rights to use, copy, modify,
          merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
          permit persons to whom the Software is furnished to do so.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
          INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
          PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
          HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
          OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
          """

          import os
          import boto3

          # Module level variables initialization
          CODE_BUILD_PROJECT = os.getenv('CODE_BUILD_PROJECT')

          codecommit = boto3.client('codecommit')

          def get_last_commit_log(repository, commit_id):
              response = codecommit.get_commit(
                  repositoryName=repository,
                  commitId=commit_id
              )
              return response['commit']


          def get_file_differences(repository_name, last_commit_id, previous_commit_id):
              response = None

              if previous_commit_id != None:
                  response = codecommit.get_differences(
                      repositoryName=repository_name,
                      beforeCommitSpecifier=previous_commit_id,
                      afterCommitSpecifier=last_commit_id
                  )
              else:
                  # The case of getting initial commit (Without beforeCommitSpecifier)
                  response = codecommit.get_differences(
                      repositoryName=repository_name,
                      afterCommitSpecifier=last_commit_id
                  )

              differences = []

              if response == None:
                  return differences

              while "nextToken" in response:
                  response = codecommit.get_differences(
                      repositoryName=repository_name,
                      beforeCommitSpecifier=previous_commit_id,
                      afterCommitSpecifier=last_commit_id,
                      nextToken=response["nextToken"]
                  )
                  differences += response.get("differences", [])
              else:
                  differences += response["differences"]

              return differences


          def get_last_commit_id(repository, branch="master"):
              response = codecommit.get_branch(
                  repositoryName=repository,
                  branch_name=branch
              )
              return response['branch']['commitId']


          def lambda_handler(event, context):

              # Initialize needed variables
              file_extension_allowed = [".txt"]
              file_names_allowed = ["requirements.txt", "pipfile"]
              commit_hash = event['Records'][0]['codecommit']['references'][0]['commit']
              region = event['Records'][0]['awsRegion']
              repo_name = event['Records'][0]['eventSourceARN'].split(':')[-1]
              account_id = event['Records'][0]['eventSourceARN'].split(':')[4]
              branch_name = os.path.basename(
                  str(event['Records'][0]['codecommit']['references'][0]['ref']))

              # Get commit ID for fetching the commit log
              if (commit_hash == None) or (commit_hash == '0000000000000000000000000000000000000000'):
                  commit_hash = get_last_commit_id(repo_name, branch_name)

              last_commit = get_last_commit_log(repo_name, commit_hash)

              previous_commit_id = None
              if len(last_commit['parents']) > 0:
                  previous_commit_id = last_commit['parents'][0]

              print('last_commit_id: {0} previous_commit_id: {1}'.format(
                  commit_hash, previous_commit_id))

              differences = get_file_differences(repo_name, commit_hash, previous_commit_id)
              # Check whether specific file or specific extension file is added/modified
              # and set flag for build triggering
              trigger_build = False
              deleted_packages = None
              print("diff files are", differences)
              for diff in differences:
                  root, extension = os.path.splitext(str(diff['afterBlob']['path']))
                  file_name = os.path.basename(str(diff['afterBlob']['path']))
                  if ((extension in file_extension_allowed) or (file_name in file_names_allowed)):
                      trigger_build = True
                      # Extract the actual changes
                      after_blob = diff['afterBlob']['blobId']
                      before_blob = diff['beforeBlob']['blobId']
                      after_changes = set(codecommit.get_blob(repositoryName=repo_name, blobId=after_blob)['content'].decode().split())
                      before_changes = set(codecommit.get_blob(repositoryName=repo_name, blobId=before_blob)['content'].decode().split())

                      added_modified_packages = after_changes - before_changes

                      # If result set is empty, it means there was a deletion file so we compare the other way around
                      if not added_modified_packages:
                          added_modified_packages = None
                          deleted_packages = before_changes - after_changes
                      print("packages to add", added_modified_packages, "packages to delete", deleted_packages)

              # Trigger codebuild job to build the repository if needed
              if trigger_build:
                  print('found changes')
                  # build = {
                  #     'projectName': CODE_BUILD_PROJECT,
                  #     'sourceVersion': commit_hash,
                  #     'sourceTypeOverride': 'CODECOMMIT',
                  #     'sourceLocationOverride': 'https://git-codecommit.%s.amazonaws.com/v1/repos/%s' % (region, repo_name),
                  #     'environmentVariablesOverride': [
                  #         {
                  #             'name': 'AWS_DEFAULT_REGION',
                  #             'value': region,
                  #             'type': 'PLAINTEXT'
                  #         },
                  #         {
                  #             'name': 'ECR_REPO',
                  #             'value': ECR_REPO_NAME,
                  #             'type': 'PLAINTEXT'
                  #         },
                  #         {
                  #             'name': 'AWS_ACCOUNT_ID',
                  #             'value': account_id,
                  #             'type': 'PLAINTEXT'
                  #         }
                  #     ]
                  # }

                  # print("Building docker image from repo %s in region %s" %
                  #       (repo_name, region))

                  # # build all the things and push to Amazon ECR!
                  # cb.start_build(**build)
              else:
                  print('Changed files does not match any triggers. Hence docker image build is suppressed')
              return 'Success.'
      Description: Recieve CodeCommit events and calculate the package names were changed. 
      FunctionName: !Sub '${ProjectName}-package-calc'
      Handler: "index.lambda_handler"
      MemorySize: 512
      Role: !Sub
        - arn:aws:iam::${AWS::AccountId}:role/${role}
        - role: !Sub ${ProjectName}-Package-Calc-Trigger-Role
      Runtime: python3.8
      Tags:
        - Key: Project
          Value: !Ref 'ProjectName'
      Timeout: 300
  PackageCalcLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
                Sid: LogAccessPolicy
              - Action:
                  - codecommit:GetTree
                  - codecommit:BatchGetCommits
                  - codecommit:GetBlob
                  - codecommit:GetCommit
                  - codecommit:GetCommitHistory
                  - codecommit:GetDifferences
                  - codecommit:GetReferences
                  - codecommit:GetObjectIdentifier
                  - codecommit:BatchGetCommits
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ProjectName}-repo'
                Sid: CodeCommitRead
            Version: '2012-10-17'
          PolicyName: !Sub
            - ${name}-RolePolicy
            - name: !Sub ${ProjectName}-Package-Calc-Trigger-Role
      RoleName: !Sub ${ProjectName}-Package-Calc-Trigger-Role
  PermissionForCodeCommitToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'PackageCalcLambda'
      Principal: codecommit.amazonaws.com